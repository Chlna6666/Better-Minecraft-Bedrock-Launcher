name: build-and-prerelease

on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build_windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Restore npm cache (optional)
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies (npm)
        run: npm ci --ignore-scripts
        shell: pwsh

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo (registry, git, target, bin)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-v1
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Tauri CLI (best-effort)
        run: |
          cargo install tauri-cli --locked
          if ($LASTEXITCODE -ne 0) {
            Write-Host "cargo install tauri-cli returned exit code $LASTEXITCODE — continuing"
          } else {
            Write-Host "tauri-cli installed successfully"
          }
        shell: pwsh

      - name: Ensure tauri-cli in PATH (debug)
        run: |
          if (Get-Command tauri -ErrorAction SilentlyContinue) {
            Write-Host "tauri found at: $(Get-Command tauri).Path"
          } else {
            Write-Host "tauri not found in PATH. Listing ~/.cargo/bin:"
            Get-ChildItem $env:USERPROFILE\.cargo\bin | ForEach-Object { Write-Host $_.FullName }
          }
        shell: pwsh

      - name: Build Tauri App
        run: |
          cargo tauri build
        working-directory: .
        shell: pwsh

      - name: Collect build artifacts
        run: |
          if (-not (Test-Path -Path build)) { New-Item -ItemType Directory -Path build | Out-Null }

          # 常见输出位置：src-tauri/target/release/*.exe
          Try {
            Copy-Item -Path src-tauri\target\release\*.exe -Destination build -Force -ErrorAction SilentlyContinue
          } Catch {
            Write-Host "no exe in target/release"
          }

          if (Test-Path "src-tauri/target/release/bundle") {
            Copy-Item -Path src-tauri\target\release\bundle\**\* -Destination build -Recurse -Force -ErrorAction SilentlyContinue
          } else {
            Write-Host "no bundle directory found"
          }
        shell: pwsh

      - name: Get version from Cargo.toml
        id: get_version
        run: |
          $ct = Get-Content src-tauri\Cargo.toml -Raw
          if ($ct -match '^\s*version\s*=\s*"(.*?)"') {
            $v = $Matches[1]
          } else {
            $v = "0.0.0"
          }
          echo "version=$v" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Create Pre-release and upload assets
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.get_version.outputs.version }}-pre
          name: "Pre-release v${{ steps.get_version.outputs.version }}"
          files: build/**/*
          draft: false
          prerelease: true
