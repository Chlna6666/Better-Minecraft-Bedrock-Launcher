name: build-and-prerelease

on:
  push:
    branches: [ master ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build_windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Restore npm cache (optional)
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies (npm)
        run: npm ci --ignore-scripts
        shell: pwsh

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo (registry, git, target, bin)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-v1
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install Tauri CLI
        run: cargo install tauri-cli --locked || true

      - name: Show environment (debug)
        run: |
          Write-Host "cargo: $(Get-Command cargo).Path"
          if (Get-Command tauri -ErrorAction SilentlyContinue) {
            Write-Host "tauri: $(Get-Command tauri).Path"
          } else {
            Write-Host "tauri not in PATH; listing ~/.cargo/bin"
            Get-ChildItem $env:USERPROFILE\.cargo\bin | ForEach-Object { Write-Host $_.FullName }
          }
        shell: pwsh

      - name: Build Tauri App
        run: |
          cargo tauri build
        working-directory: .
        shell: pwsh

      - name: Collect build artifacts (copy to build/)
        run: |
          if (-not (Test-Path -Path build)) { New-Item -ItemType Directory -Path build | Out-Null }

          # 复制 target/release 下的 exe（若存在）
          if (Test-Path "src-tauri/target/release") {
            Get-ChildItem src-tauri/target/release -Filter *.exe -Recurse -ErrorAction SilentlyContinue | ForEach-Object {
              Copy-Item -Path $_.FullName -Destination build -Force -ErrorAction SilentlyContinue
            }
          }

          # 复制 bundle 下所有可能的安装器（msi, nsis, zip, exe）
          if (Test-Path "src-tauri/target/release/bundle") {
            Copy-Item -Path src-tauri/target/release/bundle/** -Destination build -Recurse -Force -ErrorAction SilentlyContinue
          }

          # 也尝试复制根 target/release（如果项目以不同方式输出）
          if (Test-Path "target/release") {
            Get-ChildItem target/release -Filter *.exe -Recurse -ErrorAction SilentlyContinue | ForEach-Object {
              Copy-Item -Path $_.FullName -Destination build -Force -ErrorAction SilentlyContinue
            }
          }

          Write-Host "===== build/ contents ====="
          Get-ChildItem build -Recurse | ForEach-Object { Write-Host $_.FullName }
        shell: pwsh

      - name: list target directories
        run: |
          Write-Host "=== src-tauri/target/release ==="
          if (Test-Path "src-tauri/target/release") { Get-ChildItem src-tauri/target/release -Recurse | ForEach-Object { Write-Host $_.FullName } } else { Write-Host "not found" }
          Write-Host "=== src-tauri/target/release/bundle ==="
          if (Test-Path "src-tauri/target/release/bundle") { Get-ChildItem src-tauri/target/release/bundle -Recurse | ForEach-Object { Write-Host $_.FullName } } else { Write-Host "not found" }
        shell: pwsh

      - name: Get version via cargo metadata (workspace-safe)
        id: get_version
        run: |
          Write-Host "Running cargo metadata to extract package version..."
          $meta_json = & cargo metadata --no-deps --format-version 1 2>$null
          if ($LASTEXITCODE -ne 0 -or -not $meta_json) {
            Write-Host "cargo metadata failed; falling back to src-tauri/Cargo.toml text parse"
            if (Test-Path "src-tauri/Cargo.toml") {
              $ct = Get-Content src-tauri/Cargo.toml -Raw
              if ($ct -match '^\s*version\s*=\s*"(.*?)"') { $v = $Matches[1] } else { $v = "0.0.0" }
            } elseif (Test-Path "Cargo.toml") {
              $ct = Get-Content Cargo.toml -Raw
              if ($ct -match '^\s*version\s*=\s*"(.*?)"') { $v = $Matches[1] } else { $v = "0.0.0" }
            } else {
              $v = "0.0.0"
            }
          } else {
            $meta = $meta_json | ConvertFrom-Json

            # 优先寻找 manifest_path 包含 src-tauri/Cargo.toml 的包
            $pkg = $meta.packages | Where-Object { $_.manifest_path -like "*src-tauri*/Cargo.toml" } | Select-Object -First 1

            if (-not $pkg) {
              # 如果找不到，尝试找到任意 package 的第一个
              $pkg = $meta.packages | Select-Object -First 1
            }

            if ($pkg) {
              $v = $pkg.version
            } else {
              Write-Host "No package found in cargo metadata; fallback version"
              if ($meta.packages.Count -gt 0) {
                $v = $meta.packages[0].version
              } else {
                $v = "0.0.0"
              }
            }
          }

          Write-Host "Extracted version: $v"
          echo "version=$v" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Create Pre-release and upload assets
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.get_version.outputs.version }}-pre
          name: "Pre-release v${{ steps.get_version.outputs.version }}"
          artifacts: build
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
